spring.datasource.url=jdbc:mysql://localhost:3306/authdb?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
server.port=8080
# Hibernate props
spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.main.allow-circular-references=true
## Social login provider props
spring.security.oauth2.client.registration.google.clientId=253761577221-507jgbrqdmq9splsoh3j4t4ir8nq2ss1.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=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
spring.security.oauth2.client.registration.facebook.clientId=6437993349616335
#spring.security.oauth2.client.registration.facebook.clientSecret=e99c4b1f81685e4ad344af1e6a755946spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
spring.security.oauth2.client.registration.github.clientId=e9f7c951792728e3fceb
spring.security.oauth2.client.registration.github.clientSecret=51da0aa4dead9b9ef15f472a524a16e96cdff2dc
app.auth.tokenSecret=b9Rf0wGyftPjiq4zi9osT44op7k1ePZsEDzh9p5QQQqkuyZZykmF3aSNSN2yx1NJTQg6BEqKW6gK10G2ZitJLQ
app.auth.tokenExpirationMsec=864000000
## After successfully authenticating with the OAuth2 Provider,
## we'll be generating an auth token for the user and sending the token to the
## redirectUri mentioned by the frontend client in the /oauth2/authorization request.
## We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:4200/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
## For detailed logging during development
logging.level.com=TRACE
logging.level.org.springframework=TRACE
logging.level.org.hibernate.SQL=TRACE
logging.level.org.hibernate.type=TRACE
Specify the base64-encoded key value
